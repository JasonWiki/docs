一、概念
//分支branch
	一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。
	你可以从已有的代码中生成一个新的分支,这个分支与剩余的分支完全独立。默认的分支往往是叫master。
	用户可以选择一个分支，选择一个分支叫做checkout.
	如果你想开发一个新的产品功能，你可以建立一个分支，对这个分支的进行修改，而不至于会影响到主支上的代码。

//仓库Repository
	一个仓库包括了所有的版本信息、所有的分支和标记信息.
	在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。

//提交Commit
	提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。
	每次提交都包括作者和提交者，作者和提交者可以是不同的人

//URL
	URl用来标识一个仓库的位置

//远程仓库
	远端Git仓库和标准的Git仓库有如下差别：一个标准的Git仓库包括了源代码和历史信息记录。
	我们可以直接在这个基础上修改代码，因为它已经包含了一个工作副本。
	但是远端仓库没有包括工作副本，只包括了历史信息。可以使用–bare选项来创建一个这样的仓库。
	git clone --bare . ../zun/rete.git		//克隆本地仓库到rete里

//术语
deploy: 测试分支
rebase: 很多人同时开发的时候，会有不同的分支线。rebase表示把别人版本比自己高的分支，合并到自己当前的分支中
origin: 代码仓库源点
master: 主分支
branch: 主分支下的一个从分支


二、命令
1、使用时配置全局名
git config  --global user.name "cyndiWade"
git config  --global user.emal "zhanglin492103904@qq.com"
git config 	--list							//获取配置文件信息
cat ~/.gitconfig


2、查看分支
git remote -v
//添加仓库源
git remote add origin git@git.corp.anjuke.com:aifang/aifang-branch
//添加分支
git remote add branch git@git.corp.anjuke.com:aifang/aifang-branch
git remote add origin git@git.corp.anjuke.com:aifang/aifang-site

3、基本操作命令
git add . 			//选中

git commit -a  					//相当于git add .; git commit; 。git commit -a无法把新增文件或文件夹加入进来
git co filename.php				//表示不提交某个修改文件

git pull			//其实pull命令完成了两个动作，首先从远端分支获取diff信息，第二个动作就是将改变合并到本地分支中。
git pull --rebase branch pmt-20352 		//从服务器合并最新的分支仓库到本地仓库
git fetch branch pmt-20352:pmt-20352	//拉一个服务器分支到本地的分支中

//操作时，要切换当前的分支
git fetch origin master:online-fangjia-bug	//新建分支时，要从服务器master主分支 到 到本地的online-fangjia-bug分支中


git push						//将本地仓库推送到远程服务器仓库。
git push origin pmt-20352		//提交到当前库到 源仓库的pmt-20352分支中
git push origin master			//把更改提交到 源仓库的主线分支中

#当push的时候
git push branch pmt-20352:pmt-20352	//把本地分支仓库，提交到服务器的某个分支仓库
				本地仓库：服务器分支仓库
#当pull的时候
git pull branch pmt-20352:pmt-20352	//把本地分支仓库，提交到服务器的某个分支仓库
				服务器分支仓库：本地仓库

//上线rebase检测(用这种)
git checkout pmt-20352		//进入开发分支
git fetch origin master		//从服务器源仓库拉取主分支(线上仓库)
git rebase FETCH_HEAD		//检测本地分支是否与线上分支冲突了，如果有冲突找人解决，没有冲突则可以上线了

//横跨几个月的项目需要合并master的分支
git pull --rebase origin master	//以上的简短操作。

//小项目只需要
git pull --rebase git-branch pmt-21146		//合并开发分支的项目

#解决冲突
1、git rebase --abort		// 重新检测冲突

2、解决冲突
CONFLICT (content): Merge conflict in app-web/page/taofang/Topic.phtml	//出现这个时
git add app-web/page/taofang/Topic.phtml		//vi这个冲突文件时，解决冲突
[(no branch)] git rebase --continue				//重新rebase,如果有冲突继续解决,每次解决都重复这条命令,直到解决未知

然后在提交到一个新的分支上 git push git-branch pmt-23423:pmt-23423-01

git rebase --skip	//如果中间遇到某个补丁不需要应用，可以用下面命令忽略：

//删除远程分支
git push origin :pmt-cms-21395

//回滚到某个版本
git reset --hard 2e1b1db4c4de485a45aea29c9e72e339f5baeed1
git reset  2e1b1db4c4de485a45aea29c9e72e339f5baeed1  （没有提交commit的状态）


//暂存
git stash
git stash pop 取出


7、日志查看
git reflog			//操作日志

git status  		//查看那些文件发生了改动。这个命令在git commit之前有效，

git show master 	//查看某个分支历史记录
git show 81e01bf5d5f5c611f6528936d734f23359a43c66 	//查看某个指纹的修改信息

git log --graph		//查看日志数
git log --oneline	//查看以前的commit

git show HEAD^ 		//查看当前分支的父级历史记录
					git show HEAD^^ 表示父级的父级
//双父级时的处理
git show HEAD^1		//查看第一个父级
git show HEAD^2		//查看第二个父级

git diff			//检测修改过的数据与现有.git仓库中的数据是否一致。这个命令只在git add之前使用有效。如果已经add了，那么此命令输出为空 。
git diff –cached 	//这个命令在git add之后在git commit之前有效。





4、合作开发
//.git仓库有2种模式：master主分支，branch从分支。
git branch experimental 		//创建一个试验分支，名称叫experimen
git branch 						//显示当前都有哪些分支，其中标注*为当前所在分支
git checkout experimental 		//转移到experimental分支
git checkout -f  experimental		//强行切换分支
git commit -a 					//在experimental分支改进完代码之后用commit在此分支中进行提交
git checkout master 			//转移回master主分支
git merge experimental 			//经证实分支开发成功，将exerimental分支合并到主分支
git commit -a 					//彻底完成此次分支合并，即提交master分支
git branch -d experimental 		//因为experimental分支已提交，所以可安全删除此分支
								(-d，表示在分支已经合并到主干后删除分支
								 -D，表示不论如何都删除分支)


5、如果分支开发失败：
git checkout master
git branch -D experimental //由于分支被证明失败，因此使用-D来放弃并删除该分支


6、克隆工作
git clone git@github.com:cyndiWade/zun.git	kfs	//克隆仓库到本地上的kfs目录中
git commit -a 							//bob提交自己的改进成果到自己的git仓库中，并口头告知我（rocrocket）他已经完成了工作。
git pull 								//更新克隆分支修改的数据到主分支master中
git fetch branch pmt-20352:pmt-20352	//把克隆的开发成果放置到工作目录下的bobworks分支中
git whatchanged -p master:bobworks 		//比较master主分支与bobworks分支都做了些什么改变





7、别名
git branch stable V3		//创建一个V3的分支


8、文件
git blame filename			//谁创建了或者是修改了这个文件






**********注意事项**********
1、只要在服务器线上的分支，就不要再次开发了。需要重新建立一个分支。
2、没有在服务器线上的分支，则可以在原有分支重新更改。
