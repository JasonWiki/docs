Linux数据包过滤软件：iptables  （264  9.3.3）

一、说明
	1、使用iptables (2.4 - 2.6 内核使用的版本 )
		注意：不同版本的内核，使用的防火墙机制不同。使用前，先查看内核版本 
		uname -r 	
		
	2、规则说明。
		1. Rule 1 先抵挡 192.168.100.100 ；
		2. Rule 2 再让要求 WWW 服务的封包通过；
		3. Rule 3 将所有的封包丢弃。
		
		#iptables 至少有三个表格的 table (filter：本机进出, nat：后端主机, mangle：管理特殊标志的，比较少用)
		
	3、剖析
			# 封包：tcp、udp等协议     链：不同表格中的不同链
			a) filter (过滤器)：主要跟进入 Linux 本机的封包有关，这个是预设的 table 
					INPUT：主要与想要进入我们 Linux 本机的封包有关；
					OUTPUT：主要与我们 Linux 本机所要送出的封包有关；
					FORWARD：这个咚咚与 Linux 本机比较没有关系， 他可以『转递封包』到后端的计算机中，与下列 nat table 相关性较高。	
			
			b) nat (地址转换)：是 Network Address Translation 的缩写， 这个表格主要在进行来源与目的之 IP 或 port 的转换，与 Linux 本机较无关，主要与 Linux 主机后的局域网络内计算机较有相关。
					PREROUTING：在进行路由判断之前所要进行的规则(DNAT/REDIRECT)
					POSTROUTING：在进行路由判断之后所要进行的规则(SNAT/MASQUERADE)
					OUTPUT：与发送出去的封包有关	
				
			c) mangle (破坏者)：
				这个表格主要是与特殊的封包的路由旗标有关， 早期仅有 PREROUTING 及 OUTPUT 链，不过从 kernel 2.4.18 之后加入了 INPUT 及 FORWARD 链。 
				由于这个表格与特殊旗标相关性较高，所以像咱们这种单纯的环境当中，较少使用 mangle 这个表格。	
				
		4) 应用场合
			Linux 是作为 www 服务，那么要开放客户端对你的 www 要求有响应，就得要处理 filter 的 INPUT 链； 
			Linux 是作为局域网络的路由器，那么就得要分析 nat 的各个链以及 filter 的 FORWARD 链才行。	
				
				
	4、实际运用
		#注：
			 iptables [-t tables] [-L] [-nv] 
				选项与参数： 
				-t ：后面接 table ，例如 nat 或 filter ，若省略此项目，则使用默认的 filter 
				-L ：列出目前的 table 的规则 
				-n ：不进行 IP 与 HOSTNAME 的反查，显示讯息的速度会快很多！
				-v ：列出更多的信息，包括通过该规则的封包总位数、相关的网络接口等


		1) filter 表格
			a)	规则的观察与清除
				i) iptables -t filter -L -n		//列出 filter table 三条链的规则		
					Chain INPUT (policy ACCEPT) 		<==针对 INPUT 链，且预设政策为可接受 ，还有、FORWARD链、OUTPUT链等
				
					target prot opt source destination 				<==说明栏 
						#注：
						 target：代表进行的动作， ACCEPT 是放行，而 REJECT 则是拒绝，此外，尚有 DROP (丢弃) 的项目！
					 prot：代表使用的封包协议，主要有 tcp, udp 及 icmp 三种封包格式；
					 opt：额外的选项说明
					 source ：代表此规则是针对哪个『来源 IP』进行限制？
					 destination ：代表此规则是针对哪个『目标 IP』进行限制？
				
					ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHED
				
			
				ii)	iptables-save			//完整的防火墙规则
					iptables-save -t filter		//列出完整的防火墙规则
				
			
				iii) 清除所有本地规则（慎用。。）
					iptables -F			//清除所有的已订定的规则；
					iptables -X			//杀掉所有使用者 "自定义" 的 chain (应该说的是 tables ）啰；
					iptables -Z			//将所有的 chain 的计数与流量统计都归零
				
			
			b) 定义预设政策 (policy) 
				#『 当你的封包不在你设定的规则之内时，则该封包的通过与否，是以 Policy 的设定为准』
				i)	iptables -t filter -P INPUT DROP						//将本机的 INPUT 设定为 DROP (由于 INPUT 设定为 DROP 而又尚未有任何规则，所有的封包都无法进入你的主机！是不通的防火墙设定！(网络联机是双向))
				ii)	iptables -t filter -P OUTPUT ACCEPT				//将本机的 OUTPUT 设定为 ACCEPT 
				iii)	iptables -t filter -P FORWARD ACCEPT			//将本机的 FORWARD 设定为 ACCEPT 
				
		
			c) TIP, 网域及接口装置
				#设置防火墙规则 （语法）
				iptables [-AI 链名] [-io 网络接口] [-p 协议]  [-s 来源IP/网域] [-d 目标IP/网域] -j [ACCEPT|DROP|REJECT|LOG] 
					选项与参数： 
					-AI 链名：针对某的链进行规则的 "插入" 或 "累加" 
					-A ：新增加一条规则，该规则增加在原本规则的最后面。例如原本已经有四条规则， 使用 -A 就可以加上第五条规则！ 
					-I  ：插入一条规则。如果没有指定此规则的顺序，默认是插入变成第一条规则。 例如原本有四条规则，使用 -I 则该规则变成第一条，而原本四条变成 2~5 号 链 ：有 INPUT, OUTPUT, FORWARD 等，此链名称又与 -io 有关，请看底下。 
					-io 网络接口：设定封包进出的接口规范 
					-i ：封包所进入的那个网络接口，例如 eth0, lo 等接口。需与 INPUT 链配合；
					-o ：封包所传出的那个网络接口，需与 OUTPUT 链配合；
					-p 协定：设定此规则适用于哪种封包格式 主要的封包格式有： tcp, udp, icmp 及 all
					-s 来源 IP/网域：设定此规则之封包的来源项目，可指定单纯的 IP 或包括网域，例如： IP ：192.168.0.100 网域：192.168.0.0/24, 192.168.0.0/255.255.255.0 均可。 若规范为『不许』时，则加上 ! 即可，
					-s ! 192.168.100.0/24 表示不许 192.168.100.0/24 之封包来源；
					-d 目标 IP/网域：同 -s ，只不过这里指的是目标的 IP 或网域。 
					-j ：后面接动作，主要的动作有接受(ACCEPT)、丢弃(DROP)、拒绝(REJECT)及记录(LOG)
					
				#范例：
				i) 针对ip设置
					iptables -A INPUT -i lo -j ACCEPT					//设定 lo 成为受信任的装置，亦即进出 lo 的封包都予以接受 
					
					iptables -A INPUT -i eth1 -s 192.168.100.0/24 -j ACCEPT			//只要是来自内网的 (192.168.100.0/24) 的封包通通接受
					
					iptables -A INPUT -i eth1 -s 192.168.100.10 -j ACCEPT				//只要是来自 192.168.100.10 就接受，但 192.168.100.230 这个恶意来源就丢弃
					iptables -A INPUT -i eth1 -s 192.168.100.230 -j DROP
					
					iptables -A INPUT -s 192.168.2.200 -j LOG								//来自 192.168.2.200 这个IP时，记录日志在/var/log/messages
				
				ii) 针对埠口(端口)设定	
					#加上 -p tcp 或 -p udp 的参数才会成功
					iptables [-AI 链] [-io 网络接口] [-p tcp,udp]  [-s 来源IP/网域] [--sport 埠口范围]  [-d 目标IP/网域] [--dport 埠口范围] -j [ACCEPT|DROP|REJECT]
						选项与参数： 
						--sport 埠口范围：限制来源的端口口号码，端口口号码可以是连续的，例如 1024:65535 
						--dport 埠口范围：限制目标的端口口号码。
				
					iptables -A INPUT -i eth0 -p tcp --dport 21 -j DROP			//tcp进入本机 port 21 的封包都抵挡掉
					
					iptables -A INPUT -i eth0 -p tcp --dport 139 -j ACCEPT		//tcp进入本机 port 139 的封包放行
					
					iptables -A INPUT -i eth0 -p tcp -s 192.168.1.0/24 --sport 1024:65534 --dport ssh -j DROP		//来自 192.168.1.0/24 的 1024:65535 埠口的封包，且想要联机到本机的 ssh port 就予以抵挡
				
				
				iii) iptables 外挂模块：mac 与 state 。
					iptables -A INPUT [-m state] [--state 状态] 
						#选项与参数：
						 -m ：一些 iptables 的外挂模块，主要常见的有：
							 state ：状态模块 
							 mac ：网络卡硬件地址 (hardware address) 
						 --state ：一些封包的状态，主要有： 
							INVALID ：无效的封包，例如数据破损的封包状态 
							ESTABLISHED：已经联机成功的联机状态；
							 NEW ：想要新建立联机的封包状态； 
							RELATED ：这个最常用！表示这个封包是与我们主机发送出去的封包有关
						
						//用于只要是本机OUTPUT发出去的响应，那么就可以予以接受放行。
						iptables -A INPUT -m state  --state RELATED,ESTABLISHED -j ACCEPT		//只要已建立或相关封包就予以通过
						iptables -A INPUT -m state --state INVALID -j DROP				//只要是不合法封包就丢弃
				
						//网卡来进行放行与防御
						iptables -A INPUT -m mac --mac-source aa:bb:cc:dd:ee:ff  -j ACCEPT 	//局域网络内的 aa:bb:cc:dd:ee:ff 主机开放其联机
				
							
			d) 设置防火墙顺序
				规则归零：清除所有已经存在的规则 (iptables -F...)
				预设政策：除了 INPUT 这个自定义链设为 DROP 外，其他为预设 ACCEPT；
				信任本机：由于 lo 对本机来说是相当重要的，因此 lo 必须设定为信任装置；
				回应封包：让本机主动向外要求而响应的封包可以进入本机 (ESTABLISHED,RELATED)
				信任用户：这是非必要的，如果你想要让区网的来源可用你的主机资源时
				
				第二步骤抵挡所有远程的来源封包，而透过第四步骤让你要求的远程主机响应封包可以进入， 加上让本机的 lo 这个内部循环装置可以放行
				
				vim bin/firewall.sh #!/bin/bash
				PATH=/sbin:/bin:/usr/sbin:/usr/bin; export PATH
				# 1. 清除规则
				iptables -F 
				iptables -X 
				iptables -Z
				
				# 2. 设定政策 
				iptables -P INPUT DROP 
				iptables -P OUTPUT ACCEPT 
				iptables -P FORWARD ACCEPT
				
				# 3~5. 制订各项规则 
				iptables -A INPUT -i lo -j ACCEPT 
				iptables -A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT 
				#iptables -A INPUT -i eth0 -s 192.168.1.0/24 -j ACCEPT
			
				# 6. 写入防火墙规则配置文件，下次开机启动
				/etc/init.d/iptables save
				
			
			e) 避免 SYN Flooding 的 DoS 攻击说！	
				echo "1" > /proc/sys/net/ipv4/tcp_syncookies
				
				
	5、			
		
				
				
				