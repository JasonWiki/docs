# 配置需要处理的 srouce channels Sinks (UseLog port:10001 ~ 10010), (ClickLog port:10011 ~ 10020)
agentDw.sources = SrcBrowserUseLog SrcSafeUseLog SrcPinyinUseLog  SrcSafeClickLog SrcBrowserClickLog SrcPinyinClickLog
agentDw.channels = ChBrowserUseLog ChSafeUseLog ChPinyinUseLog  ChSafeClickLog ChBrowserClickLog ChPinyinClickLog
agentDw.sinks = SinkBrowserUseLog SinkSafeUseLog SinkPinyinUseLog  SinkSafeClickLog SinkBrowserClickLog SinkPinyinClickLog


# -------------------------- 安装使用卸载日志 Start -------------------------- #

# --- BrowserUseLog 配置 Start --- #

## SrcBrowserUseLog Sources 配置
agentDw.sources.SrcBrowserUseLog.type = thrift
agentDw.sources.SrcBrowserUseLog.port = 10001
agentDw.sources.SrcBrowserUseLog.bind = 0.0.0.0
agentDw.sources.SrcBrowserUseLog.threads = 5
agentDw.sources.SrcBrowserUseLog.channels = ChBrowserUseLog
agentDw.sources.SrcBrowserUseLog.selector.type = replicating

# SrcBrowserUseLog Interceptors 配置
agentDw.sources.SrcBrowserUseLog.interceptors = in1
# SrcBrowserUseLog RegexExtractorHeaderInterceptor Interceptor 配置
agentDw.sources.SrcBrowserUseLog.interceptors.in1.type = com.angejia.dw.flume.source.interceptors.RegexExtractorHeaderInterceptor$Builder
agentDw.sources.SrcBrowserUseLog.interceptors.in1.regex = browser_use/monitor/([A-Za-z0-9/._-]+)/
agentDw.sources.SrcBrowserUseLog.interceptors.in1.extractorHeader = true
agentDw.sources.SrcBrowserUseLog.interceptors.in1.extractorHeaderKey = file
agentDw.sources.SrcBrowserUseLog.interceptors.in1.serializers = s1
agentDw.sources.SrcBrowserUseLog.interceptors.in1.serializers.s1.name = log_path

# ChBrowserUseLog channels 配置
agentDw.channels.ChBrowserUseLog.type = file
agentDw.channels.ChBrowserUseLog.checkpointDir = /var/log/flume/browser_use/checkpoint
agentDw.channels.ChBrowserUseLog.dataDirs = /var/log/flume/browser_use/data
agentDw.channels.ChBrowserUseLog.capacity = 10000
agentDw.channels.ChBrowserUseLog.threads = 5

# SinkBrowserUseLog Sinks 配置
agentDw.sinks.SinkBrowserUseLog.type = hdfs
agentDw.sinks.SinkBrowserUseLog.channel = ChBrowserUseLog
# 写入目录和文件规则,格式
agentDw.sinks.SinkBrowserUseLog.hdfs.path = hdfs://nameservice1/ods/browser_use/%{log_path}
agentDw.sinks.SinkBrowserUseLog.hdfs.filePrefix = ods.%{basename}
# 写入文件前缀规则
agentDw.sinks.SinkBrowserUseLog.hdfs.inUsePrefix = .
agentDw.sinks.SinkBrowserUseLog.hdfs.inUseSuffix = .tmp
agentDw.sinks.SinkBrowserUseLog.hdfs.round = true
agentDw.sinks.SinkBrowserUseLog.hdfs.roundValue = 5
agentDw.sinks.SinkBrowserUseLog.hdfs.roundUnit = minute
# 复制块, 用于控制滚动大小
agentDw.sinks.SinkBrowserUseLog.hdfs.minBlockReplicas = 1
agentDw.sinks.SinkBrowserUseLog.hdfs.rollSize = 0
agentDw.sinks.SinkBrowserUseLog.hdfs.rollCount = 0
agentDw.sinks.SinkBrowserUseLog.hdfs.rollInterval = 300

# 写入格式(可见文本)
agentDw.sinks.SinkBrowserUseLog.hdfs.writeFormat = Text
agentDw.sinks.SinkBrowserUseLog.hdfs.fileType = CompressedStream
# 设置压缩格式
agentDw.sinks.SinkBrowserUseLog.hdfs.codeC = snappy

# 这个拦截器写事件输出流的身体没有任何转换或修改, 事件标题将被忽略
agentDw.sinks.SinkBrowserUseLog.sink.serializer = text
# 换行符追加到每个事件
agentDw.sinks.SinkBrowserUseLog.sink.serializer.appendNewline = true

# 批处理达到这个上限, 写到 HDFS
agentDw.sinks.SinkBrowserUseLog.hdfs.batchSize = 10000
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
agentDw.sinks.SinkBrowserUseLog.hdfs.callTimeout = 60000
# 多少秒没有写入就关闭这个文件, 0 不关闭
agentDw.sinks.SinkBrowserUseLog.hdfs.idleTimeout = 0
# 使用本地时间
agentDw.sinks.SinkBrowserUseLog.hdfs.useLocalTimeStamp = true

# --- BrowserUseLog 配置 End --- #


# --- SafeUseLog 配置 Start --- #

## SrcSafeUseLog Sources 配置
agentDw.sources.SrcSafeUseLog.type = thrift
agentDw.sources.SrcSafeUseLog.port = 10002
agentDw.sources.SrcSafeUseLog.bind = 0.0.0.0
agentDw.sources.SrcSafeUseLog.threads = 5
agentDw.sources.SrcSafeUseLog.channels = ChSafeUseLog
agentDw.sources.SrcSafeUseLog.selector.type = replicating

# SrcSafeUseLog Interceptors 配置
agentDw.sources.SrcSafeUseLog.interceptors = in1
# SrcSafeUseLog RegexExtractorHeaderInterceptor Interceptor 配置
agentDw.sources.SrcSafeUseLog.interceptors.in1.type = com.angejia.dw.flume.source.interceptors.RegexExtractorHeaderInterceptor$Builder
agentDw.sources.SrcSafeUseLog.interceptors.in1.regex = safe_use/monitor/([A-Za-z0-9/._-]+)/
agentDw.sources.SrcSafeUseLog.interceptors.in1.extractorHeader = true
agentDw.sources.SrcSafeUseLog.interceptors.in1.extractorHeaderKey = file
agentDw.sources.SrcSafeUseLog.interceptors.in1.serializers = s1
agentDw.sources.SrcSafeUseLog.interceptors.in1.serializers.s1.name = log_path

# ChSafeUseLog channels 配置
agentDw.channels.ChSafeUseLog.type = file
agentDw.channels.ChSafeUseLog.checkpointDir = /var/log/flume/safe_use/checkpoint
agentDw.channels.ChSafeUseLog.dataDirs = /var/log/flume/safe_use/data
agentDw.channels.ChSafeUseLog.capacity = 10000
agentDw.channels.ChSafeUseLog.threads = 5

# SinkSafeUseLog Sinks 配置
agentDw.sinks.SinkSafeUseLog.type = hdfs
agentDw.sinks.SinkSafeUseLog.channel = ChSafeUseLog
# 写入目录和文件规则,格式
agentDw.sinks.SinkSafeUseLog.hdfs.path = hdfs://nameservice1/ods/safe_use/%{log_path}
agentDw.sinks.SinkSafeUseLog.hdfs.filePrefix = ods.%{basename}
# 写入文件前缀规则
agentDw.sinks.SinkSafeUseLog.hdfs.inUsePrefix = .
agentDw.sinks.SinkSafeUseLog.hdfs.inUseSuffix = .tmp
agentDw.sinks.SinkSafeUseLog.hdfs.round = true
agentDw.sinks.SinkSafeUseLog.hdfs.roundValue = 5
agentDw.sinks.SinkSafeUseLog.hdfs.roundUnit = minute
# 复制块, 用于控制滚动大小
agentDw.sinks.SinkSafeUseLog.hdfs.minBlockReplicas = 1
agentDw.sinks.SinkSafeUseLog.hdfs.rollSize = 0
agentDw.sinks.SinkSafeUseLog.hdfs.rollCount = 0
agentDw.sinks.SinkSafeUseLog.hdfs.rollInterval = 300

# 写入格式(可见文本)
agentDw.sinks.SinkSafeUseLog.hdfs.writeFormat = Text
agentDw.sinks.SinkSafeUseLog.hdfs.fileType = CompressedStream
# 设置压缩格式
agentDw.sinks.SinkSafeUseLog.hdfs.codeC = snappy

# 这个拦截器写事件输出流的身体没有任何转换或修改, 事件标题将被忽略
agentDw.sinks.SinkSafeUseLog.sink.serializer = text
# 换行符追加到每个事件
agentDw.sinks.SinkSafeUseLog.sink.serializer.appendNewline = true

# 批处理达到这个上限, 写到 HDFS
agentDw.sinks.SinkSafeUseLog.hdfs.batchSize = 10000
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
agentDw.sinks.SinkSafeUseLog.hdfs.callTimeout = 60000
# 多少秒没有写入就关闭这个文件, 0 不关闭
agentDw.sinks.SinkSafeUseLog.hdfs.idleTimeout = 0
# 使用本地时间
agentDw.sinks.SinkSafeUseLog.hdfs.useLocalTimeStamp = true

# --- SafeUseLog 配置 End --- #


# --- PinyinUseLog 配置 Start --- #

## SrcPinyinUseLog Sources 配置
agentDw.sources.SrcPinyinUseLog.type = thrift
agentDw.sources.SrcPinyinUseLog.port = 10003
agentDw.sources.SrcPinyinUseLog.bind = 0.0.0.0
agentDw.sources.SrcPinyinUseLog.threads = 5
agentDw.sources.SrcPinyinUseLog.selector.type = replicating
agentDw.sources.SrcPinyinUseLog.channels = ChPinyinUseLog

# SrcPinyinUseLog Interceptors 配置
agentDw.sources.SrcPinyinUseLog.interceptors = in1
# SrcPinyinUseLog RegexExtractorHeaderInterceptor Interceptor 配置
agentDw.sources.SrcPinyinUseLog.interceptors.in1.type = com.angejia.dw.flume.source.interceptors.RegexExtractorHeaderInterceptor$Builder
agentDw.sources.SrcPinyinUseLog.interceptors.in1.regex = pinyin_use/monitor/([A-Za-z0-9/._-]+)/
agentDw.sources.SrcPinyinUseLog.interceptors.in1.extractorHeader = true
agentDw.sources.SrcPinyinUseLog.interceptors.in1.extractorHeaderKey = file
agentDw.sources.SrcPinyinUseLog.interceptors.in1.serializers = s1
agentDw.sources.SrcPinyinUseLog.interceptors.in1.serializers.s1.name = log_path

# ChPinyinUseLog channels 配置
agentDw.channels.ChPinyinUseLog.type = file
agentDw.channels.ChPinyinUseLog.checkpointDir = /var/log/flume/pinyin_use/checkpoint
agentDw.channels.ChPinyinUseLog.dataDirs = /var/log/flume/pinyin_use/data
agentDw.channels.ChPinyinUseLog.capacity = 10000
agentDw.channels.ChPinyinUseLog.threads = 5

# SinkPinyinUseLog Sinks 配置
agentDw.sinks.SinkPinyinUseLog.type = hdfs
agentDw.sinks.SinkPinyinUseLog.channel = ChPinyinUseLog
# 写入目录和文件规则,格式
agentDw.sinks.SinkPinyinUseLog.hdfs.path = hdfs://nameservice1/ods/pinyin_use/%{log_path}
agentDw.sinks.SinkPinyinUseLog.hdfs.filePrefix = ods.%{basename}
# 写入文件前缀规则
agentDw.sinks.SinkPinyinUseLog.hdfs.inUsePrefix = .
agentDw.sinks.SinkPinyinUseLog.hdfs.inUseSuffix = .tmp
agentDw.sinks.SinkPinyinUseLog.hdfs.round = true
agentDw.sinks.SinkPinyinUseLog.hdfs.roundValue = 5
agentDw.sinks.SinkPinyinUseLog.hdfs.roundUnit = minute
# 复制块, 用于控制滚动大小
agentDw.sinks.SinkPinyinUseLog.hdfs.minBlockReplicas = 1
agentDw.sinks.SinkPinyinUseLog.hdfs.rollSize = 0
agentDw.sinks.SinkPinyinUseLog.hdfs.rollCount = 0
agentDw.sinks.SinkPinyinUseLog.hdfs.rollInterval = 300

# 写入格式(可见文本)
agentDw.sinks.SinkPinyinUseLog.hdfs.writeFormat = Text
agentDw.sinks.SinkPinyinUseLog.hdfs.fileType = CompressedStream
# 设置压缩格式
agentDw.sinks.SinkPinyinUseLog.hdfs.codeC = snappy

# 这个拦截器写事件输出流的身体没有任何转换或修改, 事件标题将被忽略
agentDw.sinks.SinkPinyinUseLog.sink.serializer = text
# 换行符追加到每个事件
agentDw.sinks.SinkPinyinUseLog.sink.serializer.appendNewline = true

# 每个批次刷新到 HDFS上 的 events 数量
agentDw.sinks.SinkPinyinUseLog.hdfs.batchSize = 10000
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
agentDw.sinks.SinkPinyinUseLog.hdfs.callTimeout = 60000
# 多少秒没有写入就关闭这个文件, 0 不关闭
agentDw.sinks.SinkPinyinUseLog.hdfs.idleTimeout = 0
# 使用本地时间
agentDw.sinks.SinkPinyinUseLog.hdfs.useLocalTimeStamp = true

# --- BrowserUseLog 配置 End --- #


# -------------------------- 安装使用卸载日志 End -------------------------- #




# -------------------------- 点击统计日志 Start -------------------------- #

# --- SafeClickLog 配置 Start --- #

## SrcSafeClickLog Sources 配置
agentDw.sources.SrcSafeClickLog.type = thrift
agentDw.sources.SrcSafeClickLog.port = 10011
agentDw.sources.SrcSafeClickLog.bind = 0.0.0.0
agentDw.sources.SrcSafeClickLog.threads = 5
agentDw.sources.SrcSafeClickLog.channels = ChSafeClickLog
agentDw.sources.SrcSafeClickLog.selector.type = replicating

# SrcSafeClickLog Interceptors 配置
agentDw.sources.SrcSafeClickLog.interceptors = in1
# SrcSafeClickLog RegexExtractorHeaderInterceptor Interceptor 配置
agentDw.sources.SrcSafeClickLog.interceptors.in1.type = com.angejia.dw.flume.source.interceptors.RegexExtractorHeaderInterceptor$Builder
agentDw.sources.SrcSafeClickLog.interceptors.in1.regex = safe_click/monitor/([A-Za-z0-9/._-]+)/
agentDw.sources.SrcSafeClickLog.interceptors.in1.extractorHeader = true
agentDw.sources.SrcSafeClickLog.interceptors.in1.extractorHeaderKey = file
agentDw.sources.SrcSafeClickLog.interceptors.in1.serializers = s1
agentDw.sources.SrcSafeClickLog.interceptors.in1.serializers.s1.name = log_path

# ChSafeClickLog channels 配置
agentDw.channels.ChSafeClickLog.type = file
agentDw.channels.ChSafeClickLog.checkpointDir = /var/log/flume/safe_click/checkpoint
agentDw.channels.ChSafeClickLog.dataDirs = /var/log/flume/safe_click/data
agentDw.channels.ChSafeClickLog.capacity = 10000
agentDw.channels.ChSafeClickLog.threads = 5

# SinkSafeClickLog Sinks 配置
agentDw.sinks.SinkSafeClickLog.type = hdfs
agentDw.sinks.SinkSafeClickLog.channel = ChSafeClickLog
# 写入目录和文件规则,格式
agentDw.sinks.SinkSafeClickLog.hdfs.path = hdfs://nameservice1/ods/safe_click/%{log_path}
agentDw.sinks.SinkSafeClickLog.hdfs.filePrefix = ods.%{basename}
# 写入文件前缀规则
agentDw.sinks.SinkSafeClickLog.hdfs.inUsePrefix = .
agentDw.sinks.SinkSafeClickLog.hdfs.inUseSuffix = .tmp
agentDw.sinks.SinkSafeClickLog.hdfs.round = true
agentDw.sinks.SinkSafeClickLog.hdfs.roundValue = 5
agentDw.sinks.SinkSafeClickLog.hdfs.roundUnit = minute
# 复制块, 用于控制滚动大小
agentDw.sinks.SinkSafeClickLog.hdfs.minBlockReplicas = 1
agentDw.sinks.SinkSafeClickLog.hdfs.rollSize = 0
agentDw.sinks.SinkSafeClickLog.hdfs.rollCount = 0
agentDw.sinks.SinkSafeClickLog.hdfs.rollInterval = 300

# 写入格式(可见文本)
agentDw.sinks.SinkSafeClickLog.hdfs.writeFormat = Text
agentDw.sinks.SinkSafeClickLog.hdfs.fileType = CompressedStream
# 设置压缩格式
agentDw.sinks.SinkSafeClickLog.hdfs.codeC = snappy

# 这个拦截器写事件输出流的身体没有任何转换或修改, 事件标题将被忽略
agentDw.sinks.SinkSafeClickLog.sink.serializer = text
# 换行符追加到每个事件
agentDw.sinks.SinkSafeClickLog.sink.serializer.appendNewline = true

# 批处理达到这个上限, 写到 HDFS
agentDw.sinks.SinkSafeClickLog.hdfs.batchSize = 10000
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
agentDw.sinks.SinkSafeClickLog.hdfs.callTimeout = 60000
# 多少秒没有写入就关闭这个文件, 0 不关闭
agentDw.sinks.SinkSafeClickLog.hdfs.idleTimeout = 0
# 使用本地时间
agentDw.sinks.SinkSafeClickLog.hdfs.useLocalTimeStamp = true

# --- SafeClickLog 配置 End --- #


# --- BrowserClickLog 配置 Start --- #

## SrcBrowserClickLog Sources 配置
agentDw.sources.SrcBrowserClickLog.type = thrift
agentDw.sources.SrcBrowserClickLog.port = 10012
agentDw.sources.SrcBrowserClickLog.bind = 0.0.0.0
agentDw.sources.SrcBrowserClickLog.threads = 5
agentDw.sources.SrcBrowserClickLog.channels = ChBrowserClickLog
agentDw.sources.SrcBrowserClickLog.selector.type = replicating

# SrcBrowserClickLog Interceptors 配置
agentDw.sources.SrcBrowserClickLog.interceptors = in1
# SrcBrowserClickLog RegexExtractorHeaderInterceptor Interceptor 配置
agentDw.sources.SrcBrowserClickLog.interceptors.in1.type = com.angejia.dw.flume.source.interceptors.RegexExtractorHeaderInterceptor$Builder
agentDw.sources.SrcBrowserClickLog.interceptors.in1.regex = browser_click/monitor/([A-Za-z0-9/._-]+)/
agentDw.sources.SrcBrowserClickLog.interceptors.in1.extractorHeader = true
agentDw.sources.SrcBrowserClickLog.interceptors.in1.extractorHeaderKey = file
agentDw.sources.SrcBrowserClickLog.interceptors.in1.serializers = s1
agentDw.sources.SrcBrowserClickLog.interceptors.in1.serializers.s1.name = log_path

# ChBrowserClickLog channels 配置
agentDw.channels.ChBrowserClickLog.type = file
agentDw.channels.ChBrowserClickLog.checkpointDir = /var/log/flume/browser_click/checkpoint
agentDw.channels.ChBrowserClickLog.dataDirs = /var/log/flume/browser_click/data
agentDw.channels.ChBrowserClickLog.capacity = 10000
agentDw.channels.ChBrowserClickLog.threads = 5

# SinkBrowserClickLog Sinks 配置
agentDw.sinks.SinkBrowserClickLog.type = hdfs
agentDw.sinks.SinkBrowserClickLog.channel = ChBrowserClickLog
# 写入目录和文件规则,格式
agentDw.sinks.SinkBrowserClickLog.hdfs.path = hdfs://nameservice1/ods/browser_click/%{log_path}
agentDw.sinks.SinkBrowserClickLog.hdfs.filePrefix = ods.%{basename}
# 写入文件前缀规则
agentDw.sinks.SinkBrowserClickLog.hdfs.inUsePrefix = .
agentDw.sinks.SinkBrowserClickLog.hdfs.inUseSuffix = .tmp
agentDw.sinks.SinkBrowserClickLog.hdfs.round = true
agentDw.sinks.SinkBrowserClickLog.hdfs.roundValue = 5
agentDw.sinks.SinkBrowserClickLog.hdfs.roundUnit = minute
# 复制块, 用于控制滚动大小
agentDw.sinks.SinkBrowserClickLog.hdfs.minBlockReplicas = 1
agentDw.sinks.SinkBrowserClickLog.hdfs.rollSize = 0
agentDw.sinks.SinkBrowserClickLog.hdfs.rollCount = 0
agentDw.sinks.SinkBrowserClickLog.hdfs.rollInterval = 300

# 写入格式(可见文本)
agentDw.sinks.SinkBrowserClickLog.hdfs.writeFormat = Text
agentDw.sinks.SinkBrowserClickLog.hdfs.fileType = CompressedStream
# 设置压缩格式
agentDw.sinks.SinkBrowserClickLog.hdfs.codeC = snappy

# 这个拦截器写事件输出流的身体没有任何转换或修改, 事件标题将被忽略
agentDw.sinks.SinkBrowserClickLog.sink.serializer = text
# 换行符追加到每个事件
agentDw.sinks.SinkBrowserClickLog.sink.serializer.appendNewline = true

# 批处理达到这个上限, 写到 HDFS
agentDw.sinks.SinkBrowserClickLog.hdfs.batchSize = 10000
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
agentDw.sinks.SinkBrowserClickLog.hdfs.callTimeout = 60000
# 多少秒没有写入就关闭这个文件, 0 不关闭
agentDw.sinks.SinkBrowserClickLog.hdfs.idleTimeout = 0
# 使用本地时间
agentDw.sinks.SinkBrowserClickLog.hdfs.useLocalTimeStamp = true

# --- BrowserClickLog 配置 End --- #


# --- PinyinClickLog 配置 Start --- #

## SrcPinyinClickLog Sources 配置
agentDw.sources.SrcPinyinClickLog.type = thrift
agentDw.sources.SrcPinyinClickLog.port = 10013
agentDw.sources.SrcPinyinClickLog.bind = 0.0.0.0
agentDw.sources.SrcPinyinClickLog.threads = 5
agentDw.sources.SrcPinyinClickLog.channels = ChPinyinClickLog
agentDw.sources.SrcPinyinClickLog.selector.type = replicating

# SrcPinyinClickLog Interceptors 配置
agentDw.sources.SrcPinyinClickLog.interceptors = in1
# SrcPinyinClickLog RegexExtractorHeaderInterceptor Interceptor 配置
agentDw.sources.SrcPinyinClickLog.interceptors.in1.type = com.angejia.dw.flume.source.interceptors.RegexExtractorHeaderInterceptor$Builder
agentDw.sources.SrcPinyinClickLog.interceptors.in1.regex = pinyin_click/monitor/([A-Za-z0-9/._-]+)/
agentDw.sources.SrcPinyinClickLog.interceptors.in1.extractorHeader = true
agentDw.sources.SrcPinyinClickLog.interceptors.in1.extractorHeaderKey = file
agentDw.sources.SrcPinyinClickLog.interceptors.in1.serializers = s1
agentDw.sources.SrcPinyinClickLog.interceptors.in1.serializers.s1.name = log_path

# ChPinyinClickLog channels 配置
agentDw.channels.ChPinyinClickLog.type = file
agentDw.channels.ChPinyinClickLog.checkpointDir = /var/log/flume/pinyin_click/checkpoint
agentDw.channels.ChPinyinClickLog.dataDirs = /var/log/flume/pinyin_click/data
agentDw.channels.ChPinyinClickLog.capacity = 10000
agentDw.channels.ChPinyinClickLog.threads = 5

# SinkPinyinClickLog Sinks 配置
agentDw.sinks.SinkPinyinClickLog.type = hdfs
agentDw.sinks.SinkPinyinClickLog.channel = ChPinyinClickLog
# 写入目录和文件规则,格式
agentDw.sinks.SinkPinyinClickLog.hdfs.path = hdfs://nameservice1/ods/pinyin_click/%{log_path}
agentDw.sinks.SinkPinyinClickLog.hdfs.filePrefix = ods.%{basename}
# 写入文件前缀规则
agentDw.sinks.SinkPinyinClickLog.hdfs.inUsePrefix = .
agentDw.sinks.SinkPinyinClickLog.hdfs.inUseSuffix = .tmp
agentDw.sinks.SinkPinyinClickLog.hdfs.round = true
agentDw.sinks.SinkPinyinClickLog.hdfs.roundValue = 5
agentDw.sinks.SinkPinyinClickLog.hdfs.roundUnit = minute
# 复制块, 用于控制滚动大小
agentDw.sinks.SinkPinyinClickLog.hdfs.minBlockReplicas = 1
agentDw.sinks.SinkPinyinClickLog.hdfs.rollSize = 0
agentDw.sinks.SinkPinyinClickLog.hdfs.rollCount = 0
agentDw.sinks.SinkPinyinClickLog.hdfs.rollInterval = 300

# 写入格式(可见文本)
agentDw.sinks.SinkPinyinClickLog.hdfs.writeFormat = Text
agentDw.sinks.SinkPinyinClickLog.hdfs.fileType = CompressedStream
# 设置压缩格式
agentDw.sinks.SinkPinyinClickLog.hdfs.codeC = snappy

# 这个拦截器写事件输出流的身体没有任何转换或修改, 事件标题将被忽略
agentDw.sinks.SinkPinyinClickLog.sink.serializer = text
# 换行符追加到每个事件
agentDw.sinks.SinkPinyinClickLog.sink.serializer.appendNewline = true

# 批处理达到这个上限, 写到 HDFS
agentDw.sinks.SinkPinyinClickLog.hdfs.batchSize = 10000
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
agentDw.sinks.SinkPinyinClickLog.hdfs.callTimeout = 60000
# 多少秒没有写入就关闭这个文件, 0 不关闭
agentDw.sinks.SinkPinyinClickLog.hdfs.idleTimeout = 0
# 使用本地时间
agentDw.sinks.SinkPinyinClickLog.hdfs.useLocalTimeStamp = true

# --- PinyinClickLog 配置 End --- #


# -------------------------- 点击统计日志 End -------------------------- #
