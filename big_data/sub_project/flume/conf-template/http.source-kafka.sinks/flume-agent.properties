# uba flume conf

# 配置需要处理的 srouce channels slinks
agentBi0.sources = SrcUbaAppActionLog SrcUbaWebVisitLog SrcUbaWebActionLog SrcDwAccessLog
agentBi0.channels = ChUbaAppActionLog ChUbaWebVisitLog ChUbaWebActionLog ChDwAccesslog
agentBi0.sinks = SinkUbaAppActionLog0 SinkUbaAppActionLog1 SinkUbaWebVisitLog0 SinkUbaWebVisitLog1 SinkUbaWebActionLog0 SinkUbaWebActionLog1 SinkDwAccesslog0 SinkDwAccesslog1 SinkDwAccesslogKafka

# 对所有的出口 slink 做 Load balancing Sink Processor 负载平衡处理器配置, 防止远端单点故障
agentBi0.sinkgroups = SinkGroupSinkUbaAppActionLog SinkGroupSinkUbaWebVisitLog SinkGroupSinkUbaWebActionLog SinkGroupSinkDwAccesslog


# --- UbaAppActionLog 配置 Start --- #

# SrcUbaAppActionLog syslog source 配置
#agentBi0.sources.SrcUbaAppActionLog.type = syslogtcp
#agentBi0.sources.SrcUbaAppActionLog.port = 10001 
#agentBi0.sources.SrcUbaAppActionLog.host = 0.0.0.0
#agentBi0.sources.SrcUbaAppActionLog.channels = ChUbaAppActionLog

# SrcUbaAppActionLog http source 配置
agentBi0.sources.SrcUbaAppActionLog.type = http
agentBi0.sources.SrcUbaAppActionLog.port = 10001
agentBi0.sources.SrcUbaAppActionLog.bind = 0.0.0.0
agentBi0.sources.SrcUbaAppActionLog.handler = org.apache.flume.source.http.JSONHandler
agentBi0.sources.SrcUbaAppActionLog.channels = ChUbaAppActionLog

# SrcUbaAppActionLog Timestamp Interceptor 配置
agentBi0.sources.SrcUbaAppActionLog.interceptors = in1
agentBi0.sources.SrcUbaAppActionLog.interceptors.in1.type = timestamp
agentBi0.sources.SrcUbaAppActionLog.interceptors.in1.preserveExisting = true

# ChUbaAppActionLog channels 配置
agentBi0.channels.ChUbaAppActionLog.type = file
agentBi0.channels.ChUbaAppActionLog.checkpointDir = /var/log/flume/uba_app_action/checkpoint
agentBi0.channels.ChUbaAppActionLog.dataDirs = /var/log/flume/uba_app_action/data
agentBi0.channels.ChUbaAppActionLog.threads = 2

# SinkUbaAppActionLog file sinks 配置
#agentBi0.sinks.SinkUbaAppActionLog.channel = ChUbaAppActionLog
#agentBi0.sinks.SinkUbaAppActionLog.type = file_roll
#agentBi0.sinks.SinkUbaAppActionLog.sink.directory = /var/log/flume/uba_app_action/test

# SinkUbaAppActionLog0 thrift sinks 0组配置
agentBi0.sinks.SinkUbaAppActionLog0.channel = ChUbaAppActionLog
agentBi0.sinks.SinkUbaAppActionLog0.type = thrift
agentBi0.sinks.SinkUbaAppActionLog0.hostname = log0
agentBi0.sinks.SinkUbaAppActionLog0.port = 18891
# 批量提交的个数
agentBi0.sinks.SinkUbaAppActionLog0.batch-size = 1000
# 请求超时时间, 单位毫秒
agentBi0.sinks.SinkUbaAppActionLog0.request-timeout = 20000
# 连接超时时间, 单位毫秒
agentBi0.sinks.SinkUbaAppActionLog0.connect-timeout = 3000
# 重新连接 source 的时间, 单位秒, 用于后端负载均衡的轮询时间
agentBi0.sinks.SinkUbaAppActionLog0.connection-reset-interval = 300

# SinkUbaAppActionLog1 thrift sinks 1组配置
agentBi0.sinks.SinkUbaAppActionLog1.channel = ChUbaAppActionLog
agentBi0.sinks.SinkUbaAppActionLog1.type = thrift
agentBi0.sinks.SinkUbaAppActionLog1.hostname = log1
agentBi0.sinks.SinkUbaAppActionLog1.port = 18891
agentBi0.sinks.SinkUbaAppActionLog1.batch-size = 1000
agentBi0.sinks.SinkUbaAppActionLog1.request-timeout = 20000
agentBi0.sinks.SinkUbaAppActionLog1.connect-timeout = 3000
agentBi0.sinks.SinkUbaAppActionLog1.connection-reset-interval = 300

# SinkGroupSinkUbaAppActionLog 负载均衡
#agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.sinks = SinkUbaAppActionLog0 SinkUbaAppActionLog1
#agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.type = load_balance
#agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.backoff = true
#agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.selector = random
# 最大超时秒数
#agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.selector.maxTimeOut = 30000

# SinkGroupSinkUbaAppActionLog 故障转义
agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.sinks = SinkUbaAppActionLog0 SinkUbaAppActionLog1
agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.type = failover
agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.priority.SinkUbaAppActionLog0 = 1
agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.priority.SinkUbaAppActionLog1 = 100
agentBi0.sinkgroups.SinkGroupSinkUbaAppActionLog.processor.maxpenalty = 10000

# --- UbaAppActionLog 配置 End --- #



# --- UbaWebVisitLog 配置 Start --- #

# SrcUbaWebVisitLog syslog source 配置
#agentBi0.sources.SrcUbaWebVisitLog.type = syslogtcp
#agentBi0.sources.SrcUbaWebVisitLog.port = 10002
#agentBi0.sources.SrcUbaWebVisitLog.host = 0.0.0.0
#agentBi0.sources.SrcUbaWebVisitLog.channels = ChUbaWebVisitLog

# SrcUbaWebVisitLog http source 配置
agentBi0.sources.SrcUbaWebVisitLog.type = http
agentBi0.sources.SrcUbaWebVisitLog.port = 10002
agentBi0.sources.SrcUbaWebVisitLog.bind = 0.0.0.0
agentBi0.sources.SrcUbaWebVisitLog.handler = org.apache.flume.source.http.JSONHandler
agentBi0.sources.SrcUbaWebVisitLog.channels = ChUbaWebVisitLog

# SrcUbaWebVisitLog Timestamp Interceptor 配置
agentBi0.sources.SrcUbaWebVisitLog.interceptors = in1
agentBi0.sources.SrcUbaWebVisitLog.interceptors.in1.type = timestamp
agentBi0.sources.SrcUbaWebVisitLog.interceptors.in1.preserveExisting = true

# ChUbaWebVisitLog channels 配置
agentBi0.channels.ChUbaWebVisitLog.type = file
agentBi0.channels.ChUbaWebVisitLog.checkpointDir = /var/log/flume/uba_web_visit/checkpoint
agentBi0.channels.ChUbaWebVisitLog.dataDirs = /var/log/flume/uba_web_visit/data
agentBi0.channels.ChUbaWebVisitLog.threads = 2

# SinkUbaWebVisitLog sinks 配置
#agentBi0.sinks.SinkUbaWebVisitLog.channel = ChUbaWebVisitLog
#agentBi0.sinks.SinkUbaWebVisitLog.type = file_roll
#agentBi0.sinks.SinkUbaWebVisitLog.sink.directory = /var/log/flume/uba_web_visit/test

# SinkUbaWebVisitLog0 sinks 配置
agentBi0.sinks.SinkUbaWebVisitLog0.channel = ChUbaWebVisitLog
agentBi0.sinks.SinkUbaWebVisitLog0.type = thrift
agentBi0.sinks.SinkUbaWebVisitLog0.hostname = log0
agentBi0.sinks.SinkUbaWebVisitLog0.port = 18892
agentBi0.sinks.SinkUbaWebVisitLog0.batch-size = 1000
agentBi0.sinks.SinkUbaWebVisitLog0.request-timeout = 20000
agentBi0.sinks.SinkUbaWebVisitLog0.connect-timeout = 3000
agentBi0.sinks.SinkUbaWebVisitLog0.connection-reset-interval = 300

# SinkUbaWebVisitLog1 sinks 配置
agentBi0.sinks.SinkUbaWebVisitLog1.channel = ChUbaWebVisitLog
agentBi0.sinks.SinkUbaWebVisitLog1.type = thrift
agentBi0.sinks.SinkUbaWebVisitLog1.hostname = log1
agentBi0.sinks.SinkUbaWebVisitLog1.port = 18892
agentBi0.sinks.SinkUbaWebVisitLog1.batch-size = 1000
agentBi0.sinks.SinkUbaWebVisitLog1.request-timeout = 20000
agentBi0.sinks.SinkUbaWebVisitLog1.connect-timeout = 3000
agentBi0.sinks.SinkUbaWebVisitLog1.connection-reset-interval = 300

# SinkGroupSinkUbaWebVisitLog 负载均衡
#agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.sinks = SinkUbaWebVisitLog0 SinkUbaWebVisitLog1
#agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.type = load_balance
#agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.backoff = true
#agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.selector = random

# SinkGroupSinkUbaWebVisitLog 故障转义
agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.sinks = SinkUbaWebVisitLog0 SinkUbaWebVisitLog1
agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.type = failover
agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.priority.SinkUbaWebVisitLog0 = 1
agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.priority.SinkUbaWebVisitLog1 = 100
agentBi0.sinkgroups.SinkGroupSinkUbaWebVisitLog.processor.maxpenalty = 10000

# --- UbaWebVisitLog 配置 End --- #



# --- UbaWebActionLog 配置 Start --- #

# SrcUbaWebActionLog syslog source 配置
#agentBi0.sources.SrcUbaWebActionLog.type = syslogtcp
#agentBi0.sources.SrcUbaWebActionLog.port = 10003
#agentBi0.sources.SrcUbaWebActionLog.host = 0.0.0.0
#agentBi0.sources.SrcUbaWebActionLog.channels = ChUbaWebActionLog

# SrcUbaWebActionLog http source 配置
agentBi0.sources.SrcUbaWebActionLog.type = http
agentBi0.sources.SrcUbaWebActionLog.port = 10003
agentBi0.sources.SrcUbaWebActionLog.bind = 0.0.0.0
agentBi0.sources.SrcUbaWebActionLog.handler = org.apache.flume.source.http.JSONHandler
agentBi0.sources.SrcUbaWebActionLog.channels = ChUbaWebActionLog

# SrcUbaWebActionLog Timestamp Interceptor 配置
agentBi0.sources.SrcUbaWebActionLog.interceptors = in1
agentBi0.sources.SrcUbaWebActionLog.interceptors.in1.type = timestamp
agentBi0.sources.SrcUbaWebActionLog.interceptors.in1.preserveExisting = true

# ChUbaWebActionLog channels 配置
agentBi0.channels.ChUbaWebActionLog.type = file
agentBi0.channels.ChUbaWebActionLog.checkpointDir = /var/log/flume/uba_web_action/checkpoint
agentBi0.channels.ChUbaWebActionLog.dataDirs = /var/log/flume/uba_web_action/data
agentBi0.channels.ChUbaWebActionLog.threads = 2

# SinkUbaWebActionLog sinks 配置
#agentBi0.sinks.SinkUbaWebActionLog.channel = ChUbaWebActionLog
#agentBi0.sinks.SinkUbaWebActionLog.type = file_roll
#agentBi0.sinks.SinkUbaWebActionLog.sink.directory = /var/log/flume/uba_web_action/test

# SinkUbaWebActionLog0 sinks 配置
agentBi0.sinks.SinkUbaWebActionLog0.channel = ChUbaWebActionLog
agentBi0.sinks.SinkUbaWebActionLog0.type = thrift
agentBi0.sinks.SinkUbaWebActionLog0.hostname = log0
agentBi0.sinks.SinkUbaWebActionLog0.port = 18890
agentBi0.sinks.SinkUbaWebActionLog0.batch-size = 1000
agentBi0.sinks.SinkUbaWebActionLog0.request-timeout = 20000
agentBi0.sinks.SinkUbaWebActionLog0.connect-timeout = 3000
agentBi0.sinks.SinkUbaWebActionLog0.connection-reset-interval = 300

# SinkUbaWebActionLog1 sinks 配置
agentBi0.sinks.SinkUbaWebActionLog1.channel = ChUbaWebActionLog
agentBi0.sinks.SinkUbaWebActionLog1.type = thrift
agentBi0.sinks.SinkUbaWebActionLog1.hostname = log1
agentBi0.sinks.SinkUbaWebActionLog1.port = 18890
agentBi0.sinks.SinkUbaWebActionLog1.batch-size = 1000
agentBi0.sinks.SinkUbaWebActionLog1.request-timeout = 20000
agentBi0.sinks.SinkUbaWebActionLog1.connect-timeout = 3000
agentBi0.sinks.SinkUbaWebActionLog1.connection-reset-interval = 300

# SinkGroupSinkUbaWebActionLog 负载均衡
#agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.sinks = SinkUbaWebActionLog0 SinkUbaWebActionLog1
#agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.type = load_balance
#agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.backoff = true
#agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.selector = random

# SinkGroupSinkUbaWebActionLog 故障转义
agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.sinks = SinkUbaWebActionLog0 SinkUbaWebActionLog1
agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.type = failover
agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.priority.SinkUbaWebActionLog0 = 1
agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.priority.SinkUbaWebActionLog1 = 100
agentBi0.sinkgroups.SinkGroupSinkUbaWebActionLog.processor.maxpenalty = 10000

# --- UbaWebActionLog 配置 End --- #



# --- DwAccessLog  配置 Start --- #

# SrcDwAccessLog source 配置
agentBi0.sources.SrcDwAccessLog.type = syslogudp
agentBi0.sources.SrcDwAccessLog.port = 10004
agentBi0.sources.SrcDwAccessLog.host = 0.0.0.0
agentBi0.sources.SrcDwAccessLog.channels = ChDwAccesslog

# SrcDwAccessLog Interceptors 配置
agentBi0.sources.SrcDwAccessLog.interceptors = in1 in2
# SrcDwAccessLog Search and Replace Interceptor 配置
agentBi0.sources.SrcDwAccessLog.interceptors.in1.type = search_replace
# 正则替换 ^[a-zA-Z_]+\:[ ]{1} 或者 ^lb_access\:[ ]{1}
agentBi0.sources.SrcDwAccessLog.interceptors.in1.searchPattern = ^[a-zA-Z_]+\:[ ]{1}
agentBi0.sources.SrcDwAccessLog.interceptors.in1.replaceString = 
agentBi0.sources.SrcDwAccessLog.interceptors.in1.charset = UTF-8
# SrcDwAccessLog Timestamp Interceptor 配置
agentBi0.sources.SrcDwAccessLog.interceptors.in2.type = timestamp
agentBi0.sources.SrcDwAccessLog.interceptors.in2.preserveExisting = true

# ChDwAccesslog channels 配置
agentBi0.channels.ChDwAccesslog.type = file
agentBi0.channels.ChDwAccesslog.checkpointDir = /var/log/flume/dw_access_log/checkpoint
agentBi0.channels.ChDwAccesslog.dataDirs = /var/log/flume/dw_access_log/data
agentBi0.channels.ChDwAccesslog.threads = 2

# SinkDwAccesslog To File sinks 配置
#agentBi0.sinks.SinkDwAccesslog.channel = ChDwAccesslog
#agentBi0.sinks.SinkDwAccesslog.type = file_roll
#agentBi0.sinks.SinkDwAccesslog.sink.directory = /var/log/flume/dw_access_log/test

# SinkDwAccesslogKafka To Kafka 配置
#agentBi0.sinks.SinkDwAccesslogKafka.channel = ChDwAccesslog
#agentBi0.sinks.SinkDwAccesslogKafka.type = org.apache.flume.sink.kafka.KafkaSink
#agentBi0.sinks.SinkDwAccesslogKafka.kafka.bootstrap.servers = bi4:9092
#agentBi0.sinks.SinkDwAccesslogKafka.kafka.topic = accessLogTest
#agentBi0.sinks.SinkDwAccesslogKafka.kafka.flumeBatchSize = 20
#agentBi0.sinks.SinkDwAccesslogKafka.kafka.producer.acks = 1
#agentBi0.sinks.SinkDwAccesslogKafka.kafka.producer.linger.ms = 1

# SinkDwAccesslog0 To thrift sinks 配置
agentBi0.sinks.SinkDwAccesslog0.channel = ChDwAccesslog
agentBi0.sinks.SinkDwAccesslog0.type = thrift
agentBi0.sinks.SinkDwAccesslog0.hostname = log0
agentBi0.sinks.SinkDwAccesslog0.port = 18889
agentBi0.sinks.SinkDwAccesslog0.batch-size = 1000
agentBi0.sinks.SinkDwAccesslog0.request-timeout = 20000
agentBi0.sinks.SinkDwAccesslog0.connect-timeout = 3000
agentBi0.sinks.SinkDwAccesslog0.connection-reset-interval = 300

# SinkDwAccesslog1 To thrift sinks 配置
agentBi0.sinks.SinkDwAccesslog1.channel = ChDwAccesslog
agentBi0.sinks.SinkDwAccesslog1.type = thrift
agentBi0.sinks.SinkDwAccesslog1.hostname = log1
agentBi0.sinks.SinkDwAccesslog1.port = 18889
agentBi0.sinks.SinkDwAccesslog1.batch-size = 1000
agentBi0.sinks.SinkDwAccesslog1.request-timeout = 20000
agentBi0.sinks.SinkDwAccesslog1.connect-timeout = 3000
agentBi0.sinks.SinkDwAccesslog1.connection-reset-interval = 300

# SinkGroupSinkDwAccesslog 负载均衡
#agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.sinks = SinkDwAccesslog0 SinkDwAccesslog1
#agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.type = load_balance
#agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.backoff = true
#agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.selector = random

# SinkGroupSinkDwAccesslog 故障转义
agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.sinks = SinkDwAccesslog0 SinkDwAccesslog1
agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.type = failover
agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.priority.SinkDwAccesslog0 = 1
agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.priority.SinkDwAccesslog1 = 100
agentBi0.sinkgroups.SinkGroupSinkDwAccesslog.processor.maxpenalty = 10000


# SinkDwAccesslog2 To HDFS
#agentBi0.sinks.SinkDwAccesslog1.type = hdfs
#agentBi0.sinks.SinkDwAccesslog1.channel = ChDwAccesslog
# 写入目录和文件规则
#agentBi0.sinks.SinkDwAccesslog1.hdfs.path = hdfs://uhadoop-ociicy-master2:8020/flume/dw_access_log/dw_access_log_%Y%m%d 
#agentBi0.sinks.SinkDwAccesslog1.hdfs.filePrefix = dw_access_log
#agentBi0.sinks.SinkDwAccesslog1.hdfs.fileSuffix = .log

# 写入文件前缀规则
#agentBi0.sinks.SinkDwAccesslog1.hdfs.inUsePrefix = .
#agentBi0.sinks.SinkDwAccesslog1.hdfs.inUseSuffix = .tmp
# 
#agentBi0.sinks.SinkDwAccesslog1.hdfs.round = true
#agentBi0.sinks.SinkDwAccesslog1.hdfs.roundValue = 10
#agentBi0.sinks.SinkDwAccesslog1.hdfs.roundUnit = minute

# 复制块, 用于控制滚动大小
#agentBi0.sinks.SinkDwAccesslog1.hdfs.minBlockReplicas=1
#agentBi0.sinks.SinkDwAccesslog1.hdfs.rollSize = 0
#agentBi0.sinks.SinkDwAccesslog1.hdfs.rollCount = 0
#agentBi0.sinks.SinkDwAccesslog1.hdfs.rollInterval = 300

# 写入格式 
#agentBi0.sinks.SinkDwAccesslog1.hdfs.writeFormat = Text
# 文件格式 :  SequenceFile, DataStream(数据不会压缩输出文件) or CompressedStream
#agentBi0.sinks.SinkDwAccesslog1.hdfs.fileType = DataStream
# 批处理达到这个上限, 写到 HDFS
#agentBi0.sinks.SinkDwAccesslog1.hdfs.batchSize = 100
# hdfs 打开、写、刷新、关闭的超时时间, 毫秒
#agentBi0.sinks.SinkDwAccesslog1.hdfs.callTimeout = 60000
# 多少秒 没有写入就关闭这个文件, 0 不关闭 
#agentBi0.sinks.SinkDwAccesslog1.hdfs.idleTimeout = 0
# 使用本地时间
#agentBi0.sinks.SinkDwAccesslog1.hdfs.useLocalTimeStamp = true

# --- DwAccessLog  配置 End --- #
